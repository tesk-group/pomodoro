The group decided to prioritize getting the base product completed over ensuring comprehensive testing for all possible use cases and edge cases. As such, unit tests are not currently implemented in the code base. Nonetheless, it is important to have a testing plan to ensure that there are clear requirements on what requirements unit tests need to fulfill, so that when unit tests are implemented the process is as clear and seamless as possible. This document provides said plan.

Highest priorities for unit testing are the statistics, task, timer, and user modules. As these all directly implement the core functionality of the product and are what the user will be interacting with the vast majority of the time, they must be tested thoroughly. 

The user modules should be tested to ensure they allow users to successfully register, login, logout, and retrieve the user's data. Unit tests should include tests to make sure users who have not registered cannot login, that the same email cannot be used to register more than once, that emails used to register are valid emails, and that registered users cannot login when providing incorrect passwords. Furthermore, it should ensure that when users log out, they can no longer access their tasks or statistics (i.e., their data is no longer available). Although the project does not currently include password requirements, once implemented, there should also be unit tests to ensure those requirements are fulfilled. The module for changing password should have unit tests to ensure that a password change request causes an email for resetting the password is sent to the associated account email, in order to verify the user's identity and make sure that no one else besides the user could change it. 

For the timer modules, unit tests should make sure the timer can be paused and resumed, is set to intervals of 25 minutes for working and 5 minutes for break, does not automatically start the timer when switching phases, can have distractions logged, can only be started once a task has been selected, and is correctly displayed to the user. Logged distractions should be retrievable later on by the user.

The unit tests for the task modules should ensure that tasks can be imported from Trello, can be edited at any time, and that mixing and matching custom-made tasks with imported tasks does not raise any errors. Although the current state of the project does not include a way to mark tasks as completed, once the feature is implemented, unit tests should check that tasks marked as completed are no longer available for selection as a Pomodoro task. Some possible edge cases to look out for are importing Kanban boards that have no tasks, or if a user imports a Kanban board, logs out, a task is removed from the board, and the user logs back in. 

Unit tests for the statistics modules should confirm that the statistics stored are accurate, that the 'total' statistic includes interrupted and abandoned pomodoros, that the 'finished' statistic includes interrupted pomodoros but not abandoned ones, and that the 'interrupted' pomodoros include both finished and abandoned pomodoros. Pomodoros that are interrupted more than once should not add more than one count to the interrupted statistic. However, a separate statistic that tracks the total number of interruptions rather than only the number of pomodoros that were interrupted is worth considering for future work. Every pomodoro that has been abandoned should also be marked as interrupted. 

There are other modules that may benefit from unit tests, but those discussed above are by far the most important. If the unit tests cover all of the above cases, we believe it will be enough to guarantee that the web application is running properly and that our code is maintainable and follows object-oriented design principles. Thus, future additions and updates would be easy to implement. 
